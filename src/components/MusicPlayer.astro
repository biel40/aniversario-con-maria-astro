---
interface Props {
    songSrc: string;
    songTitle?: string;
    artist?: string;
}

const { songSrc } = Astro.props;
---

<div class="music-player" id="musicPlayer">
    <div class="music-info">
        <div class="music-controls">
            <button class="play-pause-btn" id="playPauseBtn">
                <svg
                    class="play-icon"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path d="M8 5V19L19 12L8 5Z" fill="currentColor"></path>
                </svg>
                <svg
                    class="pause-icon hidden"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path d="M6 4H10V20H6V4Z" fill="currentColor"></path>
                    <path d="M14 4H18V20H14V4Z" fill="currentColor"></path>
                </svg>
            </button>

            <div class="volume-control">
                <button class="volume-btn" id="volumeBtn">
                    <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                            d="M11 5L6 9H2V15H6L11 19V5Z"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"></path>
                        <path
                            d="M19.07 4.93A10 10 0 0 1 19.07 19.07M15.54 8.46A5 5 0 0 1 15.54 15.54"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"></path>
                    </svg>
                </button>
                <input
                    type="range"
                    class="volume-slider"
                    id="volumeSlider"
                    min="0"
                    max="100"
                    value="70"
                />
            </div>
        </div>
    </div>

    <div class="progress-container">
        <div class="progress-bar" id="progressBar">
            <div class="progress" id="progress"></div>
        </div>
        <div class="time-display">
            <span id="currentTime">0:00</span>
            <span id="duration">0:00</span>
        </div>
    </div>

    <audio id="audioPlayer" preload="metadata">
        <source src={songSrc} type="audio/mpeg" />
        El teu navegador no suporta la reproducció d'àudio.
    </audio>
</div>

<style>
    .music-player {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        min-width: 300px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }

    .music-player:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 50px rgba(0, 0, 0, 0.2);
    }

    .music-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .song-details {
        flex: 1;
    }

    .song-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2d3748;
        margin: 0 0 4px 0;
        font-family: "Playfair Display", serif;
    }

    .song-artist {
        font-size: 0.9rem;
        color: #718096;
        margin: 0;
        font-style: italic;
    }

    .music-controls {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .play-pause-btn {
        background: linear-gradient(135deg, #ff6b9d, #ff8fb3);
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: white;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
    }

    .play-pause-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(255, 107, 157, 0.4);
    }

    .play-pause-btn:active {
        transform: scale(0.95);
    }

    .hidden {
        display: none;
    }

    .volume-control {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .volume-btn {
        background: none;
        border: none;
        color: #718096;
        cursor: pointer;
        padding: 5px;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

    .volume-btn:hover {
        color: #ff6b9d;
        background: rgba(255, 107, 157, 0.1);
    }

    .volume-slider {
        width: 80px;
        height: 4px;
        background: #e2e8f0;
        border-radius: 2px;
        outline: none;
        -webkit-appearance: none;
    }

    .volume-slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 16px;
        height: 16px;
        background: #ff6b9d;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .volume-slider::-webkit-slider-thumb:hover {
        transform: scale(1.2);
    }

    .progress-container {
        margin-top: 15px;
    }

    .progress-bar {
        width: 100%;
        height: 6px;
        background: #e2e8f0;
        border-radius: 3px;
        cursor: pointer;
        margin-bottom: 8px;
        position: relative;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        background: linear-gradient(90deg, #ff6b9d, #ff8fb3);
        border-radius: 3px;
        width: 0%;
        transition: width 0.1s ease;
    }

    .time-display {
        display: flex;
        justify-content: space-between;
        font-size: 0.8rem;
        color: #718096;
    }
    .music-player.playing .song-title::after {
        content: " 🎵";
        animation: bounce 1s ease-in-out infinite;
    }

    @keyframes bounce {
        0%,
        100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-2px);
        }
    }

    /* Media Queries */
    @media (max-width: 768px) {
        .music-player {
            bottom: 20px;
            right: 20px;
            left: 20px;
            min-width: auto;
            width: auto;
        }

        .volume-control {
            display: none;
        }

        .music-info {
            flex-direction: column;
            gap: 10px;
            text-align: center;
        }

        .music-controls {
            justify-content: center;
        }
    }

    /* Responsive para pantallas muy pequeñas */
    @media (max-width: 480px) {
        .music-player {
            padding: 15px;
        }

        .song-title {
            font-size: 1rem;
        }

        .play-pause-btn {
            width: 45px;
            height: 45px;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const audio = document.getElementById(
            "audioPlayer",
        ) as HTMLAudioElement;
        const playPauseBtn = document.getElementById("playPauseBtn");
        const playIcon = document.querySelector(".play-icon") as HTMLElement;
        const pauseIcon = document.querySelector(".pause-icon") as HTMLElement;
        const progressBar = document.getElementById(
            "progressBar",
        ) as HTMLElement;
        const progress = document.getElementById("progress") as HTMLElement;
        const currentTimeEl = document.getElementById(
            "currentTime",
        ) as HTMLElement;
        const durationEl = document.getElementById("duration") as HTMLElement;
        const volumeSlider = document.getElementById(
            "volumeSlider",
        ) as HTMLInputElement;
        const volumeBtn = document.getElementById("volumeBtn");
        const musicPlayer = document.getElementById(
            "musicPlayer",
        ) as HTMLElement;

        if (!audio || !playPauseBtn) return;

        let isPlaying = false;

        // Función para formatear tiempo
        function formatTime(seconds: number): string {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, "0")}`;
        }

        // Play/Pause
        playPauseBtn.addEventListener("click", () => {
            if (isPlaying) {
                audio.pause();
            } else {
                audio.play().catch((e) => {
                    console.log("Error reproduciendo audio:", e);
                });
            }
        });

        // Eventos del audio
        audio.addEventListener("play", () => {
            isPlaying = true;
            playIcon.classList.add("hidden");
            pauseIcon.classList.remove("hidden");
            musicPlayer.classList.add("playing");
        });

        audio.addEventListener("pause", () => {
            isPlaying = false;
            playIcon.classList.remove("hidden");
            pauseIcon.classList.add("hidden");
            musicPlayer.classList.remove("playing");
        });

        // Actualizar progreso de la canción
        audio.addEventListener("timeupdate", () => {
            if (audio.duration) {
                const progressPercent =
                    (audio.currentTime / audio.duration) * 100;
                progress.style.width = `${progressPercent}%`;
                // currentTimeEl.textContent = formatTime(audio.currentTime);
            }
        });

        audio.addEventListener("loadedmetadata", () => {
            durationEl.textContent = formatTime(audio.duration);
        });

        progressBar.addEventListener("click", (e) => {
            const rect = progressBar.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const width = rect.width;
            const clickPercent = clickX / width;

            if (audio.duration) {
                audio.currentTime = clickPercent * audio.duration;
            }
        });

        // Control de volumen
        volumeSlider.addEventListener("input", () => {
            audio.volume = parseInt(volumeSlider.value) / 100;
        });

        // Botón de silenciar
        let lastVolume = 0.7;
        volumeBtn?.addEventListener("click", () => {
            if (audio.volume > 0) {
                lastVolume = audio.volume;
                audio.volume = 0;
                volumeSlider.value = "0";
            } else {
                audio.volume = lastVolume;
                volumeSlider.value = (lastVolume * 100).toString();
            }
        });

        audio.volume = 0.9;

        // Loop de la canción
        audio.addEventListener("ended", () => {
            audio.currentTime = 0;
            audio.play().catch((e) => {
                console.log("Error al repetir audio:", e);
            });
        });
    });
</script>
